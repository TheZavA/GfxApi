#version 400

in vec3 normal;
in vec3 pos;
in vec4 world_pos;

uniform sampler2D tex1;
uniform sampler2D tex2;

uniform float res;

uniform vec3 cameraPos;

out vec4 frag_colour;



vec3 applyFog( in vec3  rgb,       // original color of the pixel
               in float distance,
			   in vec3  rayDir ) // camera to point distance
{
    float b =  0.0002;
    //float fogAmount = 1.0 - exp( -distance*b );
	float fogAmount = 6.1 * exp(-cameraPos.y*b) * (1.0-exp( -distance*rayDir.y*b ))/rayDir.y;
    vec3  fogColor  = vec3(0.5,0.6,0.8);
    return mix( rgb, fogColor, fogAmount );
}

vec3 applyFog2( in vec3  rgb,     // original color of the pixel
               in float distance, // camera to point distance
               in vec3  rayDir)   // camera to point vector
               
{
	float b =  0.0004;
    float fogAmount = 1.0 - exp( -distance*b );
	//float fogAmount = 0.8 * exp(-cameraPos.y*b) * (1.0-exp( -distance*rayDir.y*b ))/rayDir.y;
    float sunAmount = max( dot( rayDir, vec3(0.9, 0.6, 0.2) ), 0.0 );
    vec3  fogColor  = mix( vec3(0.5,0.6,0.8), // bluish
                           vec3(1.0,0.9,0.7), // yellowish
                           pow(sunAmount,8.0) );
    return mix( rgb, fogColor, fogAmount );
}

vec4 mapTriPlanar(sampler2D texture)
{
	vec3 blending = abs( normal );
	blending = normalize(max(blending, 0.00001)); // Force weights to sum to 1.0
	float b = (blending.x + blending.y + blending.z);
	blending /= vec3(b, b, b);

	vec4 xaxis = texture2D( texture, pos.yz * res );
	vec4 yaxis = texture2D( texture, pos.xz * res );
	vec4 zaxis = texture2D( texture, pos.xy * res );

	// blend the results of the 3 planar projections.
	vec4 tex = xaxis * blending.x + yaxis * blending.y + zaxis * blending.z;
	return tex;
}

void main () 
{
	vec3 n1 = vec3(normal.x, -normal.y, normal.z);
	float intensity = dot(vec3(0.9, 0.6, 0.2), n1) ;

	vec4 rock_color = mapTriPlanar(tex1);

	vec4 grass_color = mapTriPlanar(tex2) * 0.6;


	float slope = 1.0f - (-normal.y);
	vec4 normal_color = grass_color * 1.1;

	vec4 textureColor;
	float blendAmount = 0;

	
	if(slope < 0.1)
    {
          blendAmount = slope / 0.1f;
          textureColor = mix(grass_color, normal_color, blendAmount);
    }
	
    if((slope < 0.3) && (slope >= 0.1f))
    {
        blendAmount = (slope - 0.1f) * (1.0f / (0.3f - 0.1f));
        textureColor = mix(normal_color, rock_color, blendAmount);
    }

    if(slope >= 0.3) 
    {
        textureColor = rock_color;
    }

	//distance(cameraPos, pos) / 200
	//vec3 color =  applyFog( vec3(textureColor.r, textureColor.g, textureColor.b) * (intensity) ,
	//						 distance(cameraPos, world_pos.xyz),
	//						 normalize(cameraPos - world_pos.xyz));

	vec3 color =  applyFog2( vec3(textureColor.r, textureColor.g, textureColor.b) * (intensity) ,
							 distance(cameraPos, world_pos.xyz),
							 normalize(cameraPos - world_pos.xyz));

	
	frag_colour = vec4(color.r, color.g, color.b, 1);
}